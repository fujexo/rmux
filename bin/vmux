#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "$SCRIPT_DIR/../rmuxid"

export | grep -E "(LC|LANG)" > "$RMUXDIR/set_lc"

VID=`cat .vagrant/machines/default/*/id`
CREATED=0
NOTEXISTS=0
CCP="$RMUXDIR/cm/${VID}.conn"
if [ ! -e $CCP ]; then
	vagrant ssh -- -C -NfM -o "ControlPath=$CCP" -o ServerAliveInterval=600
	vagrant ssh -c "uname -a; who; mkdir -p '.rmux-$RMUXID/'; [ -f '.rmux-$RMUXID/init' ]" -- -o "ControlPath=$CCP"
	NOTEXISTS=$?
	# Exit on ssh argument errors, we can't recover from that
	if [ $NOTEXISTS -eq 255 ]; then
		exit 255
	fi
	CREATED=1
else
	echo Checking reachablity: timeout is 3 seconds
	OUT=`ptimeout 3 vagrant ssh -c "echo pong" -- -o "ControlPath=$CCP" -o ConnectTimeout=3 -o ServerAliveInterval=600`
	OUT="${OUT#"${OUT%%[![:space:]]*}"}"   # remove leading whitespace characters
	OUT="${OUT%"${OUT##*[![:space:]]}"}"   # remove trailing whitespace characters
	if [ "pong" != "$OUT" ]; then
		echo Host not reachable: creating new connection
		rm "$CCP"
		vagrant ssh -- -C -NfM -o "ControlPath=$CCP" -o ServerAliveInterval=600
		CREATED=1
	fi
fi
rsync -M--include="nothing" . > /dev/null 2> /dev/null
RMUXCHECK=$?
if [ $CREATED -eq 1 ]; then
	if [ $RMUXCHECK -eq 0 ]; then
		echo Using advanced rsync features
		rsync -L -r --force --delete --exclude=/tmux-bin --exclude=/.vim/spell --exclude=.git \
				--exclude=/bash_history --exclude=/my_history --exclude=/tmux-detach-hook \
				--exclude=/tmux-attach-hook --exclude="__pycache__" --exclude="*.pyc" \
				-M--include="__pycache__" -M--include="*.pyc" --exclude=".git/" --rsh="ssh -p$PORT" \
				-e"vagrant ssh -- -o \"ControlPath=$CCP\"" "$HOME/.rmux-$RMUXID/" \
				"$HOST":".rmux-$RMUXID/" > /dev/null &
		PID=$!
	else
		rsync -L -r --force --delete --exclude=/tmux-bin --exclude=/.vim/spell --exclude=.git \
				--exclude=/bash_history --exclude=/my_history --exclude=/tmux-detach-hook \
				--exclude=/tmux-attach-hook --exclude="__pycache__" --exclude="*.pyc" \
				--exclude=".git/" --rsh="ssh -p$PORT" \
				-e"vagrant ssh -- -o \"ControlPath=$CCP\"" "$HOME/.rmux-$RMUXID/" \
				"$HOST":".rmux-$RMUXID/" > /dev/null &
		PID=$!
	fi
	if [ $NOTEXISTS -ne 0 ]; then
		echo "Initializing"
		wait $PID
	fi
fi
export LANGUAGE=$LANG
vagrant ssh -c "bash --rcfile \"\$HOME/.rmux-$RMUXID/init\" -i" -- -o "ControlPath=$CCP"
